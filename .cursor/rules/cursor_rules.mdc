---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

  - **Only Use Real Wallet Implementations**
  - Applications must use real wallet implementations with real blockchain data
  - No mock wallet implementations should be used as fallbacks, even for testing
  - All blockchain interactions should occur on real networks (mainnet or testnet)

- **Error Handling Without Mocks**
  - ✅ DO: Allow operations to fail naturally when real implementations fail
    ```typescript
    try {
      const wallet = await passkeyKit.createWallet(options.rp.name, userId);
      // Process real wallet
    } catch (error) {
      // Log error and notify user
      console.error("Error creating wallet:", error);
      throw new Error(`Failed to create wallet: ${error instanceof Error ? error.message : String(error)}`);
    }
    ```
  
  - ❌ DON'T: Create mock wallets when real implementation fails
    ```typescript
    try {
      const wallet = await passkeyKit.createWallet(options.rp.name, userId);
      // Process real wallet
    } catch (error) {
      // DO NOT DO THIS:
      console.warn("Creating mock wallet as fallback");
      return createMockWallet(userId);
    }
    ```

- **Testing Strategy**
  - Use actual testnet environments for all testing
  - For unit/integration tests, use appropriate test doubles that mimic real blockchain behavior
  - Configure testnet RPC endpoints in environment variables
  - All tests should validate real blockchain transaction formats
- **Network Configuration**
  - Clearly define network endpoints in environment variables
  - Support both mainnet and testnet configurations
  - Ensure proper error handling for network connectivity issues
  - Document requirements for proper network access
